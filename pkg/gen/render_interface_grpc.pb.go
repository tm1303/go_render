// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: render_interface.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RenderInterfaceClient is the client API for RenderInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RenderInterfaceClient interface {
	SetBackgroundColour(ctx context.Context, in *SetBackgroundColourRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (RenderInterface_RenderClient, error)
}

type renderInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewRenderInterfaceClient(cc grpc.ClientConnInterface) RenderInterfaceClient {
	return &renderInterfaceClient{cc}
}

func (c *renderInterfaceClient) SetBackgroundColour(ctx context.Context, in *SetBackgroundColourRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/gen.RenderInterface/SetBackgroundColour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *renderInterfaceClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (RenderInterface_RenderClient, error) {
	stream, err := c.cc.NewStream(ctx, &RenderInterface_ServiceDesc.Streams[0], "/gen.RenderInterface/Render", opts...)
	if err != nil {
		return nil, err
	}
	x := &renderInterfaceRenderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RenderInterface_RenderClient interface {
	Recv() (*RenderResponse, error)
	grpc.ClientStream
}

type renderInterfaceRenderClient struct {
	grpc.ClientStream
}

func (x *renderInterfaceRenderClient) Recv() (*RenderResponse, error) {
	m := new(RenderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RenderInterfaceServer is the server API for RenderInterface service.
// All implementations must embed UnimplementedRenderInterfaceServer
// for forward compatibility
type RenderInterfaceServer interface {
	SetBackgroundColour(context.Context, *SetBackgroundColourRequest) (*EmptyResponse, error)
	Render(*RenderRequest, RenderInterface_RenderServer) error
	mustEmbedUnimplementedRenderInterfaceServer()
}

// UnimplementedRenderInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedRenderInterfaceServer struct {
}

func (UnimplementedRenderInterfaceServer) SetBackgroundColour(context.Context, *SetBackgroundColourRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBackgroundColour not implemented")
}
func (UnimplementedRenderInterfaceServer) Render(*RenderRequest, RenderInterface_RenderServer) error {
	return status.Errorf(codes.Unimplemented, "method Render not implemented")
}
func (UnimplementedRenderInterfaceServer) mustEmbedUnimplementedRenderInterfaceServer() {}

// UnsafeRenderInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RenderInterfaceServer will
// result in compilation errors.
type UnsafeRenderInterfaceServer interface {
	mustEmbedUnimplementedRenderInterfaceServer()
}

func RegisterRenderInterfaceServer(s grpc.ServiceRegistrar, srv RenderInterfaceServer) {
	s.RegisterService(&RenderInterface_ServiceDesc, srv)
}

func _RenderInterface_SetBackgroundColour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBackgroundColourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenderInterfaceServer).SetBackgroundColour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gen.RenderInterface/SetBackgroundColour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenderInterfaceServer).SetBackgroundColour(ctx, req.(*SetBackgroundColourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RenderInterface_Render_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RenderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RenderInterfaceServer).Render(m, &renderInterfaceRenderServer{stream})
}

type RenderInterface_RenderServer interface {
	Send(*RenderResponse) error
	grpc.ServerStream
}

type renderInterfaceRenderServer struct {
	grpc.ServerStream
}

func (x *renderInterfaceRenderServer) Send(m *RenderResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RenderInterface_ServiceDesc is the grpc.ServiceDesc for RenderInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RenderInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gen.RenderInterface",
	HandlerType: (*RenderInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetBackgroundColour",
			Handler:    _RenderInterface_SetBackgroundColour_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Render",
			Handler:       _RenderInterface_Render_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "render_interface.proto",
}
